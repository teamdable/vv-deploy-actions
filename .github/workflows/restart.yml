name: restart process

on:
  workflow_call:
    inputs:
      all-live-devices:
        description: 라이브장비 전체에서 재시작
        required: false
        type: string
      target-device:
        description: 프로세스 재시작 대상 디바이스
        required: true
        type: string
      exclude-device:
        description: 프로세스 재시작 대상에서 제외되는 디바이스
        type: string
      user:
        description: edge device username
        required: true
        type: string
      code-name:
        description: code module name
        required: true
        type: string
      slack-channel:
        description: after deploy & install, send message to this slack channel
        required: true
        type: string
      process-list:
        description: exact name of process, using start and kill
        required: true
        type: string
      slack-message:
        description: 슬랙에 작업 메세지를 보낼 때, 내용과 유의사항을 입력
        required: false
        type: string

    secrets:
      password:
        description: edge device password
        required: true
      otp:
        description: edge device otp
        required: true
env:
  file_path: /home/vv-team/actions/complete_list

jobs:
  Inform-slack-of-start:
    name: inform of start
    runs-on: self-hosted
    outputs:
      thread_ts: ${{ steps.send_slack.outputs.thread_ts }}
    steps:
      - id: send_slack
        run: |
          username=$(echo 작업 주체: ${{ github.actor }})
          message=$(echo '${{ inputs.slack-message }}')
          message=$(echo 작업 내용: "$message")
          if [[ "${{ inputs.all-live-devices}}" == "true" ]] ; then target_devices="전체 live 장비"
          else target_devices=$(echo ${{ inputs.target-device }} | sed "s/ //g" | sed "s/,/, /g"); fi
          msg="$(echo ${{ inputs.code-name }} 프로세스가 디바이스에서 재시작됩니다. 디바이스 접속을 멈춰주세요.$'\n'$username$'\n'작업 기기: $target_devices$'\n'$message)"
          result=$(slackboy -m "$msg" -p restart-process -c "${{ inputs.slack-channel }}")
          IFS=','; result_arr=(${result}); unset IFS;
          IFS=':'; ts_value_quote=(${result_arr[2]}); unset IFS;
          ts_value=$(echo ${ts_value_quote[1]} | tr -d "'")
          echo "::set-output name=thread_ts::$ts_value"

  Checkout-repository:
    name: checkout and get vpn ip
    runs-on: self-hosted
    outputs:
      vpn_ips: ${{ steps.convert_device_to_vpn.outputs.vpn_ips }}
    steps:
      - name: Checkout the deploy-target repository
        uses: actions/checkout@v2

      - name: Checkout the action repository
        uses: actions/checkout@v2
        with:
          repository: teamdable/vv-deploy-actions
          path: action/

      - name: Get VPN IP of deploy-target devices
        id: convert_device_to_vpn
        run: |
          refined_target_device=$(echo "${{ inputs.target-device }}" | sed "s/ /,/g")
          refined_exclude_device=$(echo "${{ inputs.target-device }}" |sed "s/ /,/g")
          if [[ "${{ inputs.deploy-to-all-live-devices }}" == "true" ]]; then DEPLOY_LIVE_ARGS="--include-api-live-inventory"; else DEPLOY_LIVE_ARGS=""; fi
          if [[ -n "${{ inputs.target-device }}" ]]; then ALLOW_DEVICES_ARGS="--allow-devices $refined_target_device"; else ALLOW_DEVICES_ARGS='--allow-devices ""'; fi
          if [[ -n "${{ inputs.exclude-device }}" ]]; then EXCLUDE_DEVICES_ARGS='--exclude-devices $refined_exclude_device'; else EXCLUDE_DEVICES_ARGS='--exclude-devices ""'; fi
          VPN_IP_JSON=$(action/get-vpn-ip-new $ALLOW_DEVICES_ARGS $EXCLUDE_DEVICES_ARGS $DEPLOY_LIVE_ARGS --stdout-json )
          echo Target device : "$VPN_IP_JSON"
          echo "::set-output name=vpn_ips::$VPN_IP_JSON"

  Restart-process-of-each-device:
    name: restart process of each device
    runs-on: self-hosted
    needs: [Inform-slack-of-start, Checkout-repository]
    strategy:
      matrix:
        vpn_ips: ${{ fromJson(needs.Checkout-repository.outputs.vpn_ips) }}
      fail-fast: false

    steps:
      - name: restart new process
        run: |
          action/restart-process.exp ${{ inputs.user }} ${{ matrix.vpn_ips }} ${{ secrets.password }} ${{ secrets.otp }} ${{ inputs.process-list }}
      - name: archive completed host name
        run: |
          device_id=$(edge-info-search --query vpn_ip=="${{ matrix.vpn_ips }}" -c device_id)
          echo "$device_id Deployment Finish!!! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "$device_id," >> $file_path
          echo "device_id=$device_id" >> $GITHUB_ENV
      - name: inform slackboy of finish
        run: |
          slackboy -m "$device_id의 프로세스가 재시작되었습니다" -c ${{ inputs.slack-channel }} --reply-ts ${{ needs.Inform-slack-of-start.outputs.thread_ts }}

  Complete-device-summary:
    name: process complete summary
    if: ${{ always() }}
    needs: [ Restart-process-of-each-device ]
    runs-on: self-hosted
    steps:
      - name: success devices
        run: |
          if [[ -e $file_path ]] 
          then 
            complete_string=$(cat $file_path)
            echo "complete_string : $complete_string"
            complete_devices=$(echo $complete_string | sed "s/ //g" | sed "s/,/ /g")
            rm -rf $file_path
          else
            complete_devices=""
          fi
          echo "complete devices : $complete_devices"
          echo "complete_devices_string=$complete_devices" >> $GITHUB_ENV
          

      - name : fail devices
        run: |
          target_devices=$(echo ${{ inputs.target-device }} | sed "s/ //g" | tr ',' ' ')
          echo "target_devices : $target_devices"
          complete_device_arr=($(echo $complete_devices_string))
          echo "complete_device_arr : ${complete_device_arr[@]}"
          for i in "${complete_device_arr[@]}"
          do 
            target_devices=$(echo $target_devices | sed "s/$i//")
          done
          echo "fail devices : $target_devices"
          echo "failure_devices=$target_devices" >> $GITHUB_ENV

      - name : inform of success and fail devices
        run: |
          msg="$(echo 프로세스 재시작이 모두 끝났습니다$'\n'완료 디바이스 : $complete_devices_string $'\n'실패 디바이스 : $failure_devices)"
          slackboy -m "$msg" -p restart-process -c ${{ inputs.slack-channel }}
