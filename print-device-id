#!/usr/bin/env python3
from __future__ import annotations
import vv_configargparse
from vv_edge_info.edge_info import search_edge_info


def split_string_into_list(string: str, delimiter=','):
    string_no_space = string.replace(' ', '')
    if len(string_no_space):
        split = string_no_space.split(delimiter)
    else:
        split = None

    return split


def print_device_id(vpn_ip: str | list) -> None:
    vpn_ip = vpn_ip.strip('[|]')
    vpn_ip_list = split_string_into_list(vpn_ip)
    device_id = _get_device_id_from_list(vpn_ip_list=vpn_ip_list)

    print(device_id)


def _get_device_id_from_list(vpn_ip_list: list) -> str:
    device_id_string = ''
    for vpn_ip in vpn_ip_list:
        if vpn_ip == '':
            continue
        device_id = search_edge_info(key='vpn_ip', value=vpn_ip)['device_id'].values()[0]
        device_id = device_id.strip().replace('\n', '').replace(' ', ', ')
        if not device_id:
            raise ValueError(f'적합한 device id 를 찾지 못했습니다. vpn_ip 인자값을 다시 확인해주세요 -> {vpn_ip}')
        device_id_string += f'{device_id} '
    device_id_string = device_id_string.strip()

    return device_id_string


if __name__ == '__main__':
    parser = vv_configargparse.get_argument_parser()
    parser.add_argument('--vpn-ip', type=str, required=True,
                        help='single vpn ip OR vpn ip list')
    args = parser.parse_args()

    try:
        print_device_id(vpn_ip=args.vpn_ip)

    except Exception as e:
        raise e
