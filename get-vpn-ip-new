#!/usr/bin/env python3

import os
from typing import List
from pathlib import Path
import json

import vv_configargparse
from vv_edge_info.edge_info import get_edge_info


def write_list_to_files(input_list: List[str]):
    if os.path.isfile('.tailscale-ip'):
        os.remove('.tailscale-ip')
    for i in input_list:
        with open(".tailscale-ip", "a") as f:
            f.write(i + "\n")


def split_string_into_list(string: str):
    if len(string):
        string = string.replace(',', " ").split()
    else:
        string = None

    return string


def main(include_api_live_inventory: bool,
         allow_devices: str,
         exclude_devices: str,
         exclude_inventory_id: List,
         stdout_json: bool = False):
    allow_devices = split_string_into_list(allow_devices)
    exclude_devices = split_string_into_list(exclude_devices)

    edge_info = get_edge_info(include_api_live_inventory=include_api_live_inventory,
                              allow_devices=allow_devices,
                              exclude_devices=exclude_devices,
                              exclude_inventory_id=exclude_inventory_id).to_df()

    deploy_vpn_ips = []
    deploy_vpn_ips.extend(edge_info.vpn_ip.values)

    if not deploy_vpn_ips:
        raise Exception('배포 대상 장비가 없습니다. vpn-config.ini의 설정을 확인하세요.')

    if stdout_json:
        vpn_json = json.dumps(deploy_vpn_ips)
        print(vpn_json)
    else:
        write_list_to_files(deploy_vpn_ips)


if __name__ == '__main__':
    parser = vv_configargparse.get_argument_parser()
    parser.add_argument('--include-api-live-inventory', action='store_true',
                        help='live inventory를 결과에 포함시킬지 여부.')
    parser.add_argument('--allow-devices', type=str, default='',
                        help='결과에 포함할 디바이스 정보. comma separated list.')
    parser.add_argument('--exclude-devices', type=str, default='',
                        help='결과에서 제외할 디바이스 정보. allow-list보다 나중에 적용됨.')
    parser.add_argument('--exclude-inventory-id', action='append', default=[],
                        help='결과에서 제외할 인벤토리 정보. allow-list보다 나중에 적용됨.')
    parser.add_argument('--stdout-json', action="store_true",
                        help='결과를 stdout 으로 보여준다')
    args = parser.parse_args()
    try:
        main(include_api_live_inventory=args.include_api_live_inventory,
             allow_devices=args.allow_devices,
             exclude_devices=args.exclude_devices,
             exclude_inventory_id=args.exclude_inventory_id,
             stdout_json=args.stdout_json)

    except Exception as e:
        raise e
